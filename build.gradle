buildscript {
    ext {
        javaVersion = 11
        springBootVersion = '2.3.1.RELEASE'
        lombokVersion = '1.18.12'
        uiWorkingDir = "${rootDir}/ui"
        springCloudVersion='2.2.3.RELEASE'
        mergedJacocoOutput = "${buildDir}/jacoco-merged/jacoco-merged.exec"
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.3.0'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.sonarqube' version '3.0'
    id 'jacoco'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'com.avast.gradle.docker-compose' version '0.13.0'
}

apply plugin: 'com.google.cloud.tools.appengine-appyaml'

group = 'com.ford.labs'
archivesBaseName = 'retroquest'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

sourceSets {
    test {
        java {
            srcDirs = ['api/src/test/java']
        }
        resources {
            srcDirs = ['api/src/test/resources']
        }
    }
    main {
        java {
            srcDirs = ['api/src/main/java']
        }
        resources {
            srcDirs = ['api/src/main/resources']
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.cloud:spring-cloud-config-client:${springCloudVersion}"
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1'
    implementation 'org.apache.commons:commons-csv:1.8'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.apache.httpcomponents:httpclient:4.5.12'
    implementation 'commons-io:commons-io:2.7'
    implementation 'org.flywaydb:flyway-core:6.5.2'
    runtimeOnly 'mysql:mysql-connector-java:8.0.21'
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'com.google.cloud.sql:mysql-socket-factory:1.0.16'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

bootRun {
    sourceResources sourceSets.main
}

test {
    useJUnitPlatform {
        excludeTags 'api'
    }
}

task apiTest(type: Test) {
    useJUnitPlatform {
        includeTags 'api'
    }
}

task dockerApiTest(type: GradleBuild) {
    tasks = ['apiTest']
}

task runAllTests(type: GradleBuild) {
    tasks = ['test', 'apiTest']
}

task withH2(dependsOn: bootRun) {
    doFirst {
        systemProperty 'spring.profiles.active', 'h2'
    }
}

task withDockerDb(dependsOn: bootRun) {
    doFirst {
        systemProperty 'spring.profiles.active', 'dockerdb'
    }
}

dockerCompose {
    apiTests {
        useComposeFiles = ['docker-compose.yml']
        isRequiredBy(project.tasks.dockerApiTest)
    }

    waitForTcpPorts = true
}

task installNodeModules(type: Exec) {
    workingDir = uiWorkingDir
    commandLine  'npm', 'install'
}

task buildProdPackage(type: Exec, dependsOn: 'installNodeModules') {
    workingDir = uiWorkingDir
    commandLine  'npm', 'run', 'build-prod'
}

task uiUnitTests(type: Exec, dependsOn: 'installNodeModules') {
    workingDir = uiWorkingDir
    commandLine 'npm', 'run', 'unit'
}

task uiLintSCSS(type: Exec, dependsOn: 'installNodeModules') {
    workingDir = uiWorkingDir
    commandLine 'npm', 'run', 'sass-lint'
}

task uiLintTypeScript(type: Exec, dependsOn: 'installNodeModules') {
    workingDir = uiWorkingDir
    commandLine 'npm', 'run', 'lint'
}

jacoco {
    toolVersion = '0.8.3'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacoco-html")
    }
}

task jacocoMergeAll(type: JacocoMerge) {
    executionData = fileTree(dir: "${project.buildDir}/jacoco", include: '*.exec')
    destinationFile = file(mergedJacocoOutput)
}

sonarqube {
    properties {
        property 'sonar.host.url', System.getProperty("sonar.url")
        property 'sonar.projectName', 'RetroQuest'
        property 'sonar.projectKey', 'com.ford.labs.retroquest'
        property 'sonar.analysis.mode', 'publish'
        property 'sonar.login', System.getProperty("sonar.token")
        property 'sonar.password', ''
        property 'sonar.jacoco.reportPath', mergedJacocoOutput
        property 'sonar.exclusions', ''
        property 'sonar.scm.provider', 'git'
    }
}

tasks['jacocoTestReport'].dependsOn 'jacocoMergeAll'
tasks['sonarqube'].dependsOn 'jacocoTestReport'

appengine {
    tools {
        // configure the Cloud Sdk tooling
    }
    stage {
        // configure staging for deployment
    }
    deploy {
        projectId = 'retroquest'
        version = 'initial' + getDateTs()
    }
}

def getDateTs() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
