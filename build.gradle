buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
        cfAppVersion = '2.3.0-rc.4'
        lombokVersion = '1.18.10'
        uiWorkingDir = "${rootDir}/ui"
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.3.0'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'com.github.pivotalservices.cf-app' version "${cfAppVersion}"
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id 'com.avast.gradle.docker-compose' version '0.7.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.google.cloud.tools.appengine-appyaml'

group = 'com.ford.labs'
archivesBaseName = 'retroquest'
sourceCompatibility = 1.8

sourceSets {
    test {
        java {
            srcDirs = ['api/src/test/java']
        }
        resources {
            srcDirs = ['api/src/test/resources']
        }
    }
    main {
        java {
            srcDirs = ['api/src/main/java']
        }
        resources {
            srcDirs = ['api/src/main/resources']
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'io.jsonwebtoken:jjwt:0.9.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.apache.commons:commons-csv:1.5'
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'org.apache.httpcomponents:httpclient:4.5.5'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2:1.4.197'
    runtimeOnly 'com.google.cloud.sql:mysql-socket-factory:1.0.13'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootRun {
    addResources = true
}

testSets {
    apiTest {dirName = 'api/src/apiTest'}
}

task dockerApiTest(type: GradleBuild) {
    tasks = ['apiTest']
}

task runAllTests(type: GradleBuild) {
    tasks = ['test', 'apiTest']
}

task withH2(type: org.springframework.boot.gradle.run.BootRunTask, dependsOn: 'build') {
    doFirst() {
        main = project.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperty 'spring.profiles.active', 'h2'
    }
}

task withDockerDb(type: org.springframework.boot.gradle.run.BootRunTask, dependsOn: 'build') {
    doFirst() {
        main = project.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperty 'spring.profiles.active', 'dockerdb'
    }
}

jar {
    archiveName = "${archivesBaseName}.jar"
}

dockerCompose {
    apiTests {
        useComposeFiles = ['docker-compose.yml']
        isRequiredBy(project.tasks.dockerApiTest)
    }

    waitForTcpPorts = true
}

task installNodeModules(type: Exec) {
    workingDir = uiWorkingDir
    commandLine  'npm', 'install'
}

task buildPackage(type: Exec, dependsOn: 'installNodeModules') {
    workingDir = uiWorkingDir
    commandLine  'npm', 'run', 'build-prod'
    finalizedBy 'build'
}

appengine {
    tools {
        // configure the Cloud Sdk tooling
    }
    stage {
        // configure staging for deployment
    }
    deploy {
        projectId = 'retroquest'
        version = 'initial' + getDateTs()
    }
}

def getDateTs() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
